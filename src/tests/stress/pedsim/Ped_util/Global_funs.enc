-- This file was automatically converted by encorec

module Global_funs
import Agent_passive
import XML
fun invSqrt(input : int) : real
  var ret = 0.0
  EMBED (unit)
    {
  float x = #{input};
  float xhalf = 0.5f * x;
  int i = *(int*)&x;
  i = 0x5f3759df - (i >> 1);
  x = *(float*)&i;
  #{ret}= x*(1.5f - xhalf*x*x);
  }
  END
  ret
end
fun find_extreme(agents : [Agent]) : (int, int, int, int)
  var extreme = (-(10000), -(10000), 10000, 10000)
  var i = 0
  for a <- agents do
    i = i + 1
    extreme = extreme_check(a.pos(), extreme)
    for index <- [0..|a.targets_x| - 1] do
      extreme = extreme_check(((a.targets_x)(index), (a.targets_y)(index)), extreme)
    end
  end
  match extreme with
    case (xmax, ymax, xmin, ymin) =>
      (xmax + 10, ymax + 10, xmin - 10, ymin - 10)
    end

  end
end
fun extreme_check(a : (int, int), b : (int, int, int, int)) : (int, int, int, int)
  match (a, b) with
    case ((x, y), (xmax, ymax, xmin, ymin)) =>
      (max(x, xmax), max(y, ymax), min(x, xmin), min(y, ymin))
    end

  end
end
fun clock() : int
  var x = 0
  EMBED (unit)
    { #{x}=time(NULL); }
  END
  x
end
fun printtime(x : int) : unit
  EMBED (unit)
    { printf("TIME:%i\n", #{x}); }
  END
end
fun mk_Future(n : bool) : Fut[bool]
  EMBED (Fut[bool])
    future_t *fut = future_mk(_ctx, ENCORE_PRIMITIVE);
   future_fulfil(_ctx, fut, (encore_arg_t) {.i = #{n}});
   fut;

  END
end
fun inside(pos : (int, int), space : (int, int, int, int)) : bool
  match (pos, space) with
    case ((x, y), (xmax, ymax, xmin, ymin)) when x > xmax || x < xmin || y > ymax || y < ymin =>
      false
    end
    case _ =>
      true
    end

  end
end
fun copy_ar(arr : [int]) : [int]
  var a2 = new [int](|arr|)
  var i = 0
  for a <- arr do
    a2(i) = a
    i = i + 1
  end
  a2
end
fun copy_tr(arr : [(int, int)]) : [(int, int)]
  var a2 = new [(int, int)](|arr|)
  var i = 0
  for a <- arr do
    a2(i) = a
    i = i + 1
  end
  a2
end
fun flatten(listlist : [[(int, int)]]) : [(int, int)]
  var len = 0
  for a <- listlist do
    len = len + |a|
  end
  var list = new [(int, int)](len)
  var i = 0
  for a <- listlist do
    for b <- a do
      list(i) = b
      i = i + 1
    end
  end
  unless i == len then
    print("BAD MERGE\n")
  end
  list
end
fun max(a : int, b : int) : int
  if a > b then
    a
  else
    b
  end
end
fun min(a : int, b : int) : int
  if a < b then
    a
  else
    b
  end
end
fun int_or_0(i : Maybe[int]) : int
  match i with
    case Just(nr) =>
      nr
    end
    case _ =>
      print("or0\n")
      0
    end

  end
end
fun string_or_empty(i : Maybe[String]) : String
  match i with
    case Just(nr) =>
      nr
    end
    case _ =>
      print("orEmpty\n")
      ""
    end

  end
end

fun rot(nr : real) : real
  EMBED (unit)
    { #{nr}=sqrt(#{nr}); }
  END
  nr
end
fun abs(a : int) : int
  if a > 0 then
    a
  else
    a * -(1)
  end
end
fun man_distance(a : (int, int), b : (int, int)) : int
  match (a, b) with
    case ((x1, y1), (x2, y2)) =>
      abs(x1 - x2) + abs(y1 - y2)
    end
    case _ =>
      print("THIS WILL NEVER HAPPEN!")
      1 / 0
    end

  end
end
fun man_distance_int(x1 : int, y1 : int, x2 : int, y2 : int) : int
  abs(x1 - x2) + abs(y1 - y2)
end
fun round(x : real) : int
  val i = 0
  EMBED (unit)
    { #{i}=round(#{x}); }
  END
  i
end
fun ceil(x : real) : int
  val i = 0
  EMBED (unit)
    { #{i}=ceil(#{x}); }
  END
  i
end
fun floor(x : real) : int
  val i = 0
  EMBED (unit)
    { #{i}=floor(#{x}); }
  END
  i
end
fun distance(a : (int, int), b : (int, int)) : real
  match (a, b) with
    case ((x1, y1), (x2, y2)) =>
      rot(x1 - x2 * x1 - x2 + y1 - y2 * y1 - y2)
    end
    case _ =>
      print("THIS WILL NEVER HAPPEN!")
      1 / 0
    end

  end
end
fun distance_int(x1 : int, y1 : int, x2 : int, y2 : int) : real
  rot(x1 - x2 * x1 - x2 + y1 - y2 * y1 - y2)
end
fun equal(a : (int, int), b : (int, int)) : bool
  match (a, b) with
    case ((a1, a2), (b1, b2)) when a1 == b1 && a2 == b2 =>
      true
    end
    case _ =>
      false
    end

  end
end
fun parse_file(fname : String) : [Agent]
  var sen = new XML_lib()
  var file = new XML_node()
  do
    match sen.file_to_xml(fname) with
      case Just(xml) =>
        file = xml
      end
      case Nothing =>
        print("\n\nBADXML!\n")
      end

    end
    var xml_way = file.children_named("waypoint")
    var waypoints = new [(int, int)](|xml_way|)
    var waypoints_distance = new [int](|xml_way|)
    var i = 0
    do
      for a <- xml_way do
        waypoints(i) = match (a.attribute_value("x").to_int(), a.attribute_value("y").to_int()) with
                         case (Just(x), Just(y)) =>
                           (x, y)
                         end
                         case _ =>
                           print("BADINT!\n")
                           (0, 0)
                         end

                       end
        waypoints_distance(i) = int_or_0(a.attribute_value("r").to_int())
        i = i + 1
      end
      var nr_agents = 0
      for a <- file.children_named("agent") do
        nr_agents = nr_agents + match a.attribute_value("n").to_int() with
                                  case Just(nr) =>
                                    nr
                                  end
                                  case _ =>
                                    print("BADINT2!\n")
                                    0
                                  end

                                end
      end
      var agents = new [Agent](nr_agents)
      var i = 0
      do
        for a <- file.children_named("agent") do
          var max = int_or_0(a.attribute_value("n").to_int())
          var x = int_or_0(a.attribute_value("xs").to_int())
          var y = int_or_0(a.attribute_value("ys").to_int())
          var dx_max = int_or_0(a.attribute_value("dx").to_int()) / 2
          var dy_max = int_or_0(a.attribute_value("dy").to_int()) / 2
          var agent_waypoints = new [(int, int)](|a.children_named("addway")|)
          var dx = x - dx_max
          var dy = y - dy_max
          var j = 0
          do
            for b <- a.children_named("addway") do
              agent_waypoints(j) = waypoints(int_or_0(string_or_empty(b.attribute_value("id").substring(1, 2)).to_int()) - 1)
              unless |agent_waypoints| > 1 then
                print("THIS SHOULD NEVER HAPPEN |new_agent.waypoint|={}\n", |agent_waypoints|)
                max = 1 / 0
              end
              j = j + 1
            end
            for unused <- [0..max] do
              if dx > x + dx_max then
                print("out of space\n")
                dx = x - dx_max
              else
                if dy > y + dy_max then
                  dy = y - dy_max
                  dx = dx + 1
                else
                  dy = dy + 1
                end
              end
              agents(i) = new Agent((dx, dy), copy_tr(agent_waypoints), copy_ar(waypoints_distance), i, 10000)
              i = i + 1
            end
          end
        end
        --consume
        agents
      end
    end
  end
end
